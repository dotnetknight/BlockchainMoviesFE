{
  "contractName": "MockedTest",
  "abi": [
    {
      "constant": true,
      "inputs": [
        {
          "name": "token",
          "type": "string"
        }
      ],
      "name": "getTestStructByToken",
      "outputs": [
        {
          "components": [
            {
              "name": "token",
              "type": "string"
            },
            {
              "name": "name",
              "type": "string"
            },
            {
              "components": [
                {
                  "name": "token",
                  "type": "string"
                },
                {
                  "name": "arrayElements",
                  "type": "string[]"
                },
                {
                  "name": "field1",
                  "type": "string"
                },
                {
                  "name": "field2",
                  "type": "string"
                },
                {
                  "name": "field3",
                  "type": "string"
                },
                {
                  "components": [
                    {
                      "name": "token",
                      "type": "string"
                    },
                    {
                      "name": "comment",
                      "type": "string"
                    }
                  ],
                  "name": "array",
                  "type": "tuple"
                }
              ],
              "name": "Argument",
              "type": "tuple"
            },
            {
              "name": "isBlocked",
              "type": "bool"
            }
          ],
          "name": "",
          "type": "tuple"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "getTestStructLength",
      "outputs": [
        {
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "getTestStructs",
      "outputs": [
        {
          "components": [
            {
              "name": "token",
              "type": "string"
            },
            {
              "name": "name",
              "type": "string"
            },
            {
              "components": [
                {
                  "name": "token",
                  "type": "string"
                },
                {
                  "name": "arrayElements",
                  "type": "string[]"
                },
                {
                  "name": "field1",
                  "type": "string"
                },
                {
                  "name": "field2",
                  "type": "string"
                },
                {
                  "name": "field3",
                  "type": "string"
                },
                {
                  "components": [
                    {
                      "name": "token",
                      "type": "string"
                    },
                    {
                      "name": "comment",
                      "type": "string"
                    }
                  ],
                  "name": "array",
                  "type": "tuple"
                }
              ],
              "name": "Argument",
              "type": "tuple"
            },
            {
              "name": "isBlocked",
              "type": "bool"
            }
          ],
          "name": "",
          "type": "tuple[]"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "components": [
            {
              "name": "token",
              "type": "string"
            },
            {
              "name": "name",
              "type": "string"
            },
            {
              "components": [
                {
                  "name": "token",
                  "type": "string"
                },
                {
                  "name": "arrayElements",
                  "type": "string[]"
                },
                {
                  "name": "field1",
                  "type": "string"
                },
                {
                  "name": "field2",
                  "type": "string"
                },
                {
                  "name": "field3",
                  "type": "string"
                },
                {
                  "components": [
                    {
                      "name": "token",
                      "type": "string"
                    },
                    {
                      "name": "comment",
                      "type": "string"
                    }
                  ],
                  "name": "array",
                  "type": "tuple"
                }
              ],
              "name": "Argument",
              "type": "tuple"
            },
            {
              "name": "isBlocked",
              "type": "bool"
            }
          ],
          "name": "testStructToAdd",
          "type": "tuple"
        }
      ],
      "name": "addTestStruct",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "name": "token",
          "type": "string"
        }
      ],
      "name": "mock_getTestStructByToken",
      "outputs": [
        {
          "components": [
            {
              "name": "token",
              "type": "string"
            },
            {
              "name": "name",
              "type": "string"
            },
            {
              "components": [
                {
                  "name": "token",
                  "type": "string"
                },
                {
                  "name": "arrayElements",
                  "type": "string[]"
                },
                {
                  "name": "field1",
                  "type": "string"
                },
                {
                  "name": "field2",
                  "type": "string"
                },
                {
                  "name": "field3",
                  "type": "string"
                },
                {
                  "components": [
                    {
                      "name": "token",
                      "type": "string"
                    },
                    {
                      "name": "comment",
                      "type": "string"
                    }
                  ],
                  "name": "array",
                  "type": "tuple"
                }
              ],
              "name": "Argument",
              "type": "tuple"
            },
            {
              "name": "isBlocked",
              "type": "bool"
            }
          ],
          "name": "",
          "type": "tuple"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "name": "token",
          "type": "string"
        }
      ],
      "name": "mock_testStructExists",
      "outputs": [
        {
          "name": "",
          "type": "bool"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "bytecode": "",
  "deployedBytecode": "0x6080604052600436106100775763ffffffff7c01000000000000000000000000000000000000000000000000000000006000350416631069437a811461007c5780637ba64233146100b2578063add3c450146100d4578063d7f9f0ee146100f4578063da48369a14610121578063f44b3df314610143575b600080fd5b34801561008857600080fd5b5061009c610097366004611eb1565b610165565b6040516100a99190612195565b60405180910390f35b3480156100be57600080fd5b506100c76107a7565b6040516100a991906121a6565b3480156100e057600080fd5b5061009c6100ef366004611eb1565b6107ae565b34801561010057600080fd5b5061011461010f366004611eb1565b610e32565b6040516100a99190612181565b34801561012d57600080fd5b50610136610f30565b6040516100a99190612170565b34801561014f57600080fd5b5061016361015e366004611eee565b611551565b005b61016d6118e0565b60006001836040518082805190602001908083835b602083106101a15780518252601f199092019160209182019101610182565b518151600019602094850361010090810a82019283169219939093169190911790925294909201968752604080519788900382018820805460a0601f600260018416159099029096019091169690960493840183900490920288018501905260808701828152909750879550869450928592508401828280156102655780601f1061023a57610100808354040283529160200191610265565b820191906000526020600020905b81548152906001019060200180831161024857829003601f168201915b50505050508152602001600182018054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156103075780601f106102dc57610100808354040283529160200191610307565b820191906000526020600020905b8154815290600101906020018083116102ea57829003601f168201915b5050509183525050604080516002848101805460e06020601f600019610100600186161502019093169490940491820184900484028501810190955260c084018181529290950194929390928492918491908401828280156103aa5780601f1061037f576101008083540402835291602001916103aa565b820191906000526020600020905b81548152906001019060200180831161038d57829003601f168201915b5050505050815260200160018201805480602002602001604051908101604052809291908181526020016000905b828210156104835760008481526020908190208301805460408051601f600260001961010060018716150201909416939093049283018590048502810185019091528181529283018282801561046f5780601f106104445761010080835404028352916020019161046f565b820191906000526020600020905b81548152906001019060200180831161045257829003601f168201915b5050505050815260200190600101906103d8565b50505090825250600282810180546040805160206001841615610100026000190190931694909404601f810183900483028501830190915280845293810193908301828280156105145780601f106104e957610100808354040283529160200191610514565b820191906000526020600020905b8154815290600101906020018083116104f757829003601f168201915b505050918352505060038201805460408051602060026001851615610100026000190190941693909304601f81018490048402820184019092528181529382019392918301828280156105a85780601f1061057d576101008083540402835291602001916105a8565b820191906000526020600020905b81548152906001019060200180831161058b57829003601f168201915b505050918352505060048201805460408051602060026001851615610100026000190190941693909304601f810184900484028201840190925281815293820193929183018282801561063c5780601f106106115761010080835404028352916020019161063c565b820191906000526020600020905b81548152906001019060200180831161061f57829003601f168201915b50505091835250506040805160058401805460606020601f60026000196101006001871615020190941693909304928301819004810285018201865294840182815294909501949293919284929184918401828280156106dd5780601f106106b2576101008083540402835291602001916106dd565b820191906000526020600020905b8154815290600101906020018083116106c057829003601f168201915b50505050508152602001600182018054600181600116156101000203166002900480601f01602080910402602001604051908101604052809291908181526020018280546001816001161561010002031660029004801561077f5780601f106107545761010080835404028352916020019161077f565b820191906000526020600020905b81548152906001019060200180831161076257829003601f168201915b5050509190925250505090525081526009919091015460ff1615156020909101529392505050565b6000545b90565b6107b66118e0565b6107be6118e0565b6001836040518082805190602001908083835b602083106107f05780518252601f1990920191602091820191016107d1565b518151600019602094850361010090810a82019283169219939093169190911790925294909201968752604080519788900382018820805460a0601f600260018416159099029096019091169690960493840183900490920288018501905260808701828152909550869450928592508401828280156108b15780601f10610886576101008083540402835291602001916108b1565b820191906000526020600020905b81548152906001019060200180831161089457829003601f168201915b50505050508152602001600182018054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156109535780601f1061092857610100808354040283529160200191610953565b820191906000526020600020905b81548152906001019060200180831161093657829003601f168201915b5050509183525050604080516002848101805460e06020601f600019610100600186161502019093169490940491820184900484028501810190955260c084018181529290950194929390928492918491908401828280156109f65780601f106109cb576101008083540402835291602001916109f6565b820191906000526020600020905b8154815290600101906020018083116109d957829003601f168201915b5050505050815260200160018201805480602002602001604051908101604052809291908181526020016000905b82821015610acf5760008481526020908190208301805460408051601f6002600019610100600187161502019094169390930492830185900485028101850190915281815292830182828015610abb5780601f10610a9057610100808354040283529160200191610abb565b820191906000526020600020905b815481529060010190602001808311610a9e57829003601f168201915b505050505081526020019060010190610a24565b50505090825250600282810180546040805160206001841615610100026000190190931694909404601f81018390048302850183019091528084529381019390830182828015610b605780601f10610b3557610100808354040283529160200191610b60565b820191906000526020600020905b815481529060010190602001808311610b4357829003601f168201915b505050918352505060038201805460408051602060026001851615610100026000190190941693909304601f8101849004840282018401909252818152938201939291830182828015610bf45780601f10610bc957610100808354040283529160200191610bf4565b820191906000526020600020905b815481529060010190602001808311610bd757829003601f168201915b505050918352505060048201805460408051602060026001851615610100026000190190941693909304601f8101849004840282018401909252818152938201939291830182828015610c885780601f10610c5d57610100808354040283529160200191610c88565b820191906000526020600020905b815481529060010190602001808311610c6b57829003601f168201915b50505091835250506040805160058401805460606020601f6002600019610100600187161502019094169390930492830181900481028501820186529484018281529490950194929391928492918491840182828015610d295780601f10610cfe57610100808354040283529160200191610d29565b820191906000526020600020905b815481529060010190602001808311610d0c57829003601f168201915b50505050508152602001600182018054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015610dcb5780601f10610da057610100808354040283529160200191610dcb565b820191906000526020600020905b815481529060010190602001808311610dae57829003601f168201915b50505091909252505050905250815260099182015460ff161515602091820152858352604080518082019091529182527f4d6f636b206e616d6500000000000000000000000000000000000000000000008282015282015260016060820152915050919050565b6000610e3c6118e0565b610e45836107ae565b9050826040516020018082805190602001908083835b60208310610e7a5780518252601f199092019160209182019101610e5b565b6001836020036101000a0380198251168184511680821785525050505050509050019150506040516020818303038152906040528051906020012081600001516040516020018082805190602001908083835b60208310610eec5780518252601f199092019160209182019101610ecd565b6001836020036101000a0380198251168184511680821785525050505050509050019150506040516020818303038152906040528051906020012014915050919050565b60606000805480602002602001604051908101604052809291908181526020016000905b8282101561154857600084815260209081902060408051600a8602909201805460026001821615610100026000190190911604601f8101859004909402830160a09081019092526080830184815292939092849290918491840182828015610ffd5780601f10610fd257610100808354040283529160200191610ffd565b820191906000526020600020905b815481529060010190602001808311610fe057829003601f168201915b50505050508152602001600182018054600181600116156101000203166002900480601f01602080910402602001604051908101604052809291908181526020018280546001816001161561010002031660029004801561109f5780601f106110745761010080835404028352916020019161109f565b820191906000526020600020905b81548152906001019060200180831161108257829003601f168201915b5050509183525050604080516002848101805460e06020601f600019610100600186161502019093169490940491820184900484028501810190955260c084018181529290950194929390928492918491908401828280156111425780601f1061111757610100808354040283529160200191611142565b820191906000526020600020905b81548152906001019060200180831161112557829003601f168201915b5050505050815260200160018201805480602002602001604051908101604052809291908181526020016000905b8282101561121b5760008481526020908190208301805460408051601f60026000196101006001871615020190941693909304928301859004850281018501909152818152928301828280156112075780601f106111dc57610100808354040283529160200191611207565b820191906000526020600020905b8154815290600101906020018083116111ea57829003601f168201915b505050505081526020019060010190611170565b50505090825250600282810180546040805160206001841615610100026000190190931694909404601f810183900483028501830190915280845293810193908301828280156112ac5780601f10611281576101008083540402835291602001916112ac565b820191906000526020600020905b81548152906001019060200180831161128f57829003601f168201915b505050918352505060038201805460408051602060026001851615610100026000190190941693909304601f81018490048402820184019092528181529382019392918301828280156113405780601f1061131557610100808354040283529160200191611340565b820191906000526020600020905b81548152906001019060200180831161132357829003601f168201915b505050918352505060048201805460408051602060026001851615610100026000190190941693909304601f81018490048402820184019092528181529382019392918301828280156113d45780601f106113a9576101008083540402835291602001916113d4565b820191906000526020600020905b8154815290600101906020018083116113b757829003601f168201915b50505091835250506040805160058401805460606020601f60026000196101006001871615020190941693909304928301819004810285018201865294840182815294909501949293919284929184918401828280156114755780601f1061144a57610100808354040283529160200191611475565b820191906000526020600020905b81548152906001019060200180831161145857829003601f168201915b50505050508152602001600182018054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156115175780601f106114ec57610100808354040283529160200191611517565b820191906000526020600020905b8154815290600101906020018083116114fa57829003601f168201915b5050509190925250505090525081526009919091015460ff1615156020918201529082526001929092019101610f54565b50505050905090565b6000600182600001516040518082805190602001908083835b602083106115895780518252601f19909201916020918201910161156a565b51815160209384036101000a6000190180199092169116179052920194855250604051938490038101909320855180519195506115cb94869450019150611910565b5060208083015180516115e49260018501920190611910565b50606082015160098201805460ff1916911515919091179055604082015180518051600284019161161a91839160200190611910565b506020828101518051611633926001850192019061198e565b506040820151805161164f916002840191602090910190611910565b506060820151805161166b916003840191602090910190611910565b5060808201518051611687916004840191602090910190611910565b5060a08201518051805160058401916116a591839160200190611910565b5060208281015180516116be9260018501920190611910565b50600093505050505b8260400151602001515181101561172c576040830151602001518051600384019190839081106116f357fe5b602090810290910181015182546001810180855560009485529383902082516117229491909201920190611910565b50506001016116c7565b5060008054600181810180845592805283548492600a027f290decd9548b62a8d60345a988386fc84ba6bc95484008f6362f93160ef3e56301916117869183918591600261010092821615929092026000190116046119e7565b50600182018160010190805460018160011615610100020316600290046117ae9291906119e7565b50600282810180549091838101916117da918391859160001961010060018416150201909116046119e7565b50600182810180546117ef9284019190611a5c565b50600282810180546118149284810192916000196101006001831615020116046119e7565b506003820181600301908054600181600116156101000203166002900461183c9291906119e7565b50600482018160040190805460018160011615610100020316600290046118649291906119e7565b506005828101805490918301906118919082908490600260001961010060018416150201909116046119e7565b50600182018160010190805460018160011615610100020316600290046118b99291906119e7565b5050505060099283015491909201805460ff191660ff909216151591909117905550505050565b610140604051908101604052806060815260200160608152602001611903611aba565b8152600060209091015290565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f1061195157805160ff191683800117855561197e565b8280016001018555821561197e579182015b8281111561197e578251825591602001919060010190611963565b5061198a929150611af6565b5090565b8280548282559060005260206000209081019282156119db579160200282015b828111156119db57825180516119cb918491602090910190611910565b50916020019190600101906119ae565b5061198a929150611b10565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f10611a20578054855561197e565b8280016001018555821561197e57600052602060002091601f016020900482015b8281111561197e578254825591600101919060010190611a41565b8280548282559060005260206000209081019282156119db5760005260206000209182015b828111156119db5782829080546001816001161561010002031660029004611aaa9291906119e7565b5091600101919060010190611a81565b60e0604051908101604052806060815260200160608152602001606081526020016060815260200160608152602001611af1611b33565b905290565b6107ab91905b8082111561198a5760008155600101611afc565b6107ab91905b8082111561198a576000611b2a8282611b4a565b50600101611b16565b604080518082019091526060808252602082015290565b50805460018160011615610100020316600290046000825580601f10611b705750611b8e565b601f016020900490600052602060002090810190611b8e9190611af6565b50565b6000601f82018313611ba257600080fd5b8135611bb5611bb0826121db565b6121b4565b81815260209384019390925082018360005b83811015611bf35781358601611bdd8882611c10565b8452506020928301929190910190600101611bc7565b5050505092915050565b6000611c09823561222e565b9392505050565b6000601f82018313611c2157600080fd5b8135611c2f611bb0826121fc565b91508082526020830160208301858383011115611c4b57600080fd5b611c56838284612233565b50505092915050565b600060408284031215611c7157600080fd5b611c7b60406121b4565b9050813567ffffffffffffffff811115611c9457600080fd5b611ca084828501611c10565b825250602082013567ffffffffffffffff811115611cbd57600080fd5b611cc984828501611c10565b60208301525092915050565b600060c08284031215611ce757600080fd5b611cf160c06121b4565b9050813567ffffffffffffffff811115611d0a57600080fd5b611d1684828501611c10565b825250602082013567ffffffffffffffff811115611d3357600080fd5b611d3f84828501611b91565b602083015250604082013567ffffffffffffffff811115611d5f57600080fd5b611d6b84828501611c10565b604083015250606082013567ffffffffffffffff811115611d8b57600080fd5b611d9784828501611c10565b606083015250608082013567ffffffffffffffff811115611db757600080fd5b611dc384828501611c10565b60808301525060a082013567ffffffffffffffff811115611de357600080fd5b611def84828501611c5f565b60a08301525092915050565b600060808284031215611e0d57600080fd5b611e1760806121b4565b9050813567ffffffffffffffff811115611e3057600080fd5b611e3c84828501611c10565b825250602082013567ffffffffffffffff811115611e5957600080fd5b611e6584828501611c10565b602083015250604082013567ffffffffffffffff811115611e8557600080fd5b611e9184828501611cd5565b6040830152506060611ea584828501611bfd565b60608301525092915050565b600060208284031215611ec357600080fd5b813567ffffffffffffffff811115611eda57600080fd5b611ee684828501611c10565b949350505050565b600060208284031215611f0057600080fd5b813567ffffffffffffffff811115611f1757600080fd5b611ee684828501611dfb565b6000611f2e8261222a565b80845260208401935083602082028501611f4785612224565b60005b84811015611f7e578383038852611f62838351611ff4565b9250611f6d82612224565b602098909801979150600101611f4a565b50909695505050505050565b6000611f958261222a565b80845260208401935083602082028501611fae85612224565b60005b84811015611f7e578383038852611fc98383516120fe565b9250611fd482612224565b602098909801979150600101611fb1565b611fee8161222e565b82525050565b6000611fff8261222a565b80845261201381602086016020860161223f565b61201c8161226f565b9093016020019392505050565b80516040808452600091908401906120418282611ff4565b9150506020830151848203602086015261205b8282611ff4565b95945050505050565b805160c08084526000919084019061207c8282611ff4565b915050602083015184820360208601526120968282611f23565b915050604083015184820360408601526120b08282611ff4565b915050606083015184820360608601526120ca8282611ff4565b915050608083015184820360808601526120e48282611ff4565b91505060a083015184820360a086015261205b8282612029565b80516080808452600091908401906121168282611ff4565b915050602083015184820360208601526121308282611ff4565b9150506040830151848203604086015261214a8282612064565b915050606083015161215f6060860182611fe5565b509392505050565b611fee816107ab565b60208082528101611c098184611f8a565b6020810161218f8284611fe5565b92915050565b60208082528101611c0981846120fe565b6020810161218f8284612167565b60405181810167ffffffffffffffff811182821017156121d357600080fd5b604052919050565b600067ffffffffffffffff8211156121f257600080fd5b5060209081020190565b600067ffffffffffffffff82111561221357600080fd5b506020601f91909101601f19160190565b60200190565b5190565b151590565b82818337506000910152565b60005b8381101561225a578181015183820152602001612242565b83811115612269576000848401525b50505050565b601f01601f19169056fea265627a7a7230582027dfa9cb4e95adcc59c92ce980b0ba22f030f693d35217ff0f4f4b270108b3d56c6578706572696d656e74616cf50037",
  "sourceMap": "129:709:8:-;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;129:709:8;;;;;;;",
  "deployedSourceMap": "129:709:8:-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2079:222:5;;8:9:-1;5:2;;;30:1;27;20:12;5:2;-1:-1;2079:222:5;;;;;;;;;;;;;;;;;;;;;;;;;1677:105;;8:9:-1;5:2;;;30:1;27;20:12;5:2;1677:105:5;;;;;;;;;;;;164:341:8;;8:9:-1;5:2;;;30:1;27;20:12;5:2;-1:-1;164:341:8;;;;;;;;;513:322;;8:9:-1;5:2;;;30:1;27;20:12;5:2;-1:-1;513:322:8;;;;;;;;;;;;;;;;;1564:105:5;;8:9:-1;5:2;;;30:1;27;20:12;5:2;1564:105:5;;;;;;;;;;;;869:687;;8:9:-1;5:2;;;30:1;27;20:12;5:2;-1:-1;869:687:5;;;;;;;;;;;2079:222;2178:17;;:::i;:::-;2213:29;2245:13;2259:5;2245:20;;;;;;;;;;;;;36:153:-1;66:2;58:11;;36:153;;176:10;;164:23;;-1:-1;;139:12;;;;98:2;89:12;;;;114;36:153;;;299:10;344;;-1:-1;;263:2;259:12;;;254:3;250:22;;;246:30;;340:21;;;311:9;;295:26;;;;377:20;;;;365:33;;;2245:20:5;;;;;;;;;;;;;;;;;;2276:17;;;;;274:1:-1;2276:17:5;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2245:20;;-1:-1:-1;2245:20:5;;-1:-1:-1;2245:20:5;;-1:-1:-1;2276:17:5;2245:20;;-1:-1:-1;2276:17:5;;2245:20;2276:17;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;2276:17:5;;;-1:-1:-1;;2276:17:5;;;;;;;;;;;;-1:-1:-1;;2276:17:5;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;2276:17:5;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;2276:17:5;;;-1:-1:-1;2276:17:5;;;;;;;;;;;;;;;;-1:-1:-1;;2276:17:5;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;2276:17:5;;;-1:-1:-1;;2276:17:5;;;;;;;;;;;;;;;;-1:-1:-1;;2276:17:5;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;2276:17:5;;;-1:-1:-1;;2276:17:5;;;;;;;;;;;;;;;;-1:-1:-1;;2276:17:5;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;2276:17:5;;;-1:-1:-1;;2276:17:5;;;;;;;;;;;;-1:-1:-1;;2276:17:5;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;2276:17:5;;;;-1:-1:-1;;;2276:17:5;;-1:-1:-1;2276:17:5;;;;;;;;;;;;;;;;;;2079:222;-1:-1:-1;;;2079:222:5:o;1677:105::-;1729:7;1756:18;1677:105;;:::o;164:341:8:-;268:17;;:::i;:::-;303:28;;:::i;:::-;334:13;348:5;334:20;;;;;;;;;;;;;36:153:-1;66:2;58:11;;36:153;;176:10;;164:23;;-1:-1;;139:12;;;;98:2;89:12;;;;114;36:153;;;299:10;344;;-1:-1;;263:2;259:12;;;254:3;250:22;;;246:30;;340:21;;;311:9;;295:26;;;;377:20;;;;365:33;;;334:20:8;;;;;;;;;;;;;;;;;;303:51;;;;;274:1:-1;303:51:8;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;334:20;;-1:-1:-1;334:20:8;;-1:-1:-1;303:51:8;334:20;;-1:-1:-1;303:51:8;;334:20;303:51;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;303:51:8;;;-1:-1:-1;;303:51:8;;;;;;;;;;;;-1:-1:-1;;303:51:8;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;303:51:8;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;303:51:8;;;-1:-1:-1;303:51:8;;;;;;;;;;;;;;;;-1:-1:-1;;303:51:8;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;303:51:8;;;-1:-1:-1;;303:51:8;;;;;;;;;;;;;;;;-1:-1:-1;;303:51:8;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;303:51:8;;;-1:-1:-1;;303:51:8;;;;;;;;;;;;;;;;-1:-1:-1;;303:51:8;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;303:51:8;;;-1:-1:-1;;303:51:8;;;;;;;;;;;;-1:-1:-1;;303:51:8;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;303:51:8;;;;-1:-1:-1;;;303:51:8;;-1:-1:-1;303:51:8;;;;;;;;;;;;;;;;365:24;;;400:29;;;;;;;;;;;;;;;;;:15;;:29;303:51;440:20;;;:27;303:51;-1:-1:-1;;164:341:8;;;:::o;513:322::-;613:4;635:28;;:::i;:::-;666:32;692:5;666:25;:32::i;:::-;635:63;;820:5;803:23;;;;;;;;;;;;;;;36:153:-1;66:2;58:11;;36:153;;176:10;;164:23;;-1:-1;;139:12;;;;98:2;89:12;;;;114;36:153;;;274:1;267:3;263:2;259:12;254:3;250:22;246:30;315:4;311:9;305:3;299:10;295:26;356:4;350:3;344:10;340:21;389:7;380;377:20;372:3;365:33;3:399;;;803:23:8;;;;;;;;;;;49:4:-1;39:7;30;26:21;22:32;13:7;6:49;803:23:8;;;793:34;;;;;;758:10;:16;;;741:34;;;;;;;;;;;;;;;36:153:-1;66:2;58:11;;36:153;;176:10;;164:23;;-1:-1;;139:12;;;;98:2;89:12;;;;114;36:153;;;274:1;267:3;263:2;259:12;254:3;250:22;246:30;315:4;311:9;305:3;299:10;295:26;356:4;350:3;344:10;340:21;389:7;380;377:20;372:3;365:33;3:399;;;741:34:8;;;;;;;;;;;49:4:-1;39:7;30;26:21;22:32;13:7;6:49;741:34:8;;;731:45;;;;;;:96;711:116;;;513:322;;;:::o;1564:105:5:-;1611:19;1650:11;1643:18;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;1643:18:5;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;1643:18:5;;;-1:-1:-1;;1643:18:5;;;;;;;;;;;;-1:-1:-1;;1643:18:5;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;1643:18:5;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;1643:18:5;;;-1:-1:-1;1643:18:5;;;;;;;;;;;;;;;;-1:-1:-1;;1643:18:5;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;1643:18:5;;;-1:-1:-1;;1643:18:5;;;;;;;;;;;;;;;;-1:-1:-1;;1643:18:5;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;1643:18:5;;;-1:-1:-1;;1643:18:5;;;;;;;;;;;;;;;;-1:-1:-1;;1643:18:5;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;1643:18:5;;;-1:-1:-1;;1643:18:5;;;;;;;;;;;;-1:-1:-1;;1643:18:5;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;1643:18:5;;;;-1:-1:-1;;;1643:18:5;;-1:-1:-1;1643:18:5;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1564:105;:::o;869:687::-;945:29;977:13;991:15;:21;;;977:36;;;;;;;;;;;;;36:153:-1;66:2;58:11;;36:153;;176:10;;164:23;;-1:-1;;139:12;;;;98:2;89:12;;;;114;36:153;;;299:10;344;;263:2;259:12;;;254:3;250:22;-1:-1;;246:30;311:9;;295:26;;;340:21;;377:20;365:33;;977:36:5;;;;;-1:-1:-1;977:36:5;;;;;;;;;;;1045:21;;1026:40;;977:36;;-1:-1:-1;1026:40:5;;977:36;;-1:-1:-1;1026:40:5;;-1:-1:-1;1026:40:5;:::i;:::-;-1:-1:-1;1095:20:5;;;;;1077:38;;;;:15;;;;:38;;;:::i;:::-;-1:-1:-1;1149:25:5;;;;1126:20;;;:48;;-1:-1:-1;;1126:48:5;;;;;;;;;;1207:24;;;;1185:46;;;;:19;;;;:46;;:19;;:46;;;;:::i;:::-;-1:-1:-1;1185:46:5;;;;;;;;;;;;;;;;:::i;:::-;-1:-1:-1;1185:46:5;;;;;;;;;;;;;;;;;;:::i;:::-;-1:-1:-1;1185:46:5;;;;;;;;;;;;;;;;;;:::i;:::-;-1:-1:-1;1185:46:5;;;;;;;;;;;;;;;;;;:::i;:::-;-1:-1:-1;1185:46:5;;;;;;;;;;;;;;;;;;;;:::i;:::-;-1:-1:-1;1185:46:5;;;;;;;;;;;;;;;;:::i;:::-;-1:-1:-1;1261:9:5;;-1:-1:-1;;;;1242:266:5;1293:15;:24;;;:38;;;:45;1289:1;:49;1242:266;;;1440:24;;;;:38;;;:41;;1383:33;;;;1440:38;1479:1;;1440:41;;;;;;;;;;;;;;;;27:10:-1;;39:1;23:18;;45:23;;;-1:-1;1383:113:5;;;;;;;;;;;;;;;;;;;:::i;:::-;-1:-1:-1;;1353:3:5;;1242:266;;;-1:-1:-1;1520:11:5;27:10:-1;;39:1;23:18;;;45:23;;;1520:28:5;;;;;1537:10;;1520:28;;;;;;;;;1537:10;;1520:28;;;;;;;;;;-1:-1:-1;;1520:28:5;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;-1:-1:-1;1520:28:5;;;;;;;;;;;;;;;;;;-1:-1:-1;;1520:28:5;;;;;;;;;;;;:::i;:::-;-1:-1:-1;1520:28:5;;;;;;;;;;;;;:::i;:::-;-1:-1:-1;1520:28:5;;;;;;;;;;;;;-1:-1:-1;;1520:28:5;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;-1:-1:-1;1520:28:5;;;;;;;;;;;;;;;;;;-1:-1:-1;;1520:28:5;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;-1:-1:-1;;;;1520:28:5;;;;;;;;;;;-1:-1:-1;;1520:28:5;;;;;;;;;;;;;-1:-1:-1;;;;869:687:5:o;129:709:8:-;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;:::o;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;129:709:8;;;-1:-1:-1;129:709:8;:::i;:::-;;;:::o;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;-1:-1:-1;129:709:8;;;-1:-1:-1;129:709:8;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;:::o;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;:::o;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;:::o;22:688:-1:-;;134:4;122:17;;118:27;-1:-1;108:2;;159:1;156;149:12;108:2;196:6;183:20;218:82;233:66;292:6;233:66;;;218:82;;;328:21;;;372:4;360:17;;;;209:91;;-1:-1;385:14;;360:17;480:1;465:239;490:6;487:1;484:13;465:239;;;573:3;560:17;552:6;548:30;597:43;636:3;624:10;597:43;;;585:56;;-1:-1;664:4;655:14;;;;683;;;;;512:1;505:9;465:239;;;469:14;101:609;;;;;;;;718:112;;782:43;817:6;804:20;782:43;;;773:52;767:63;-1:-1;;;767:63;838:434;;929:4;917:17;;913:27;-1:-1;903:2;;954:1;951;944:12;903:2;991:6;978:20;1013:61;1028:45;1066:6;1028:45;;1013:61;1004:70;;1094:6;1087:5;1080:21;1130:4;1122:6;1118:17;1163:4;1156:5;1152:16;1198:3;1189:6;1184:3;1180:16;1177:25;1174:2;;;1215:1;1212;1205:12;1174:2;1225:41;1259:6;1254:3;1249;1225:41;;;896:376;;;;;;;;1755:647;;1862:4;1850:9;1845:3;1841:19;1837:30;1834:2;;;1880:1;1877;1870:12;1834:2;1898:20;1913:4;1898:20;;;1889:29;-1:-1;1969:31;;2020:18;2009:30;;2006:2;;;2052:1;2049;2042:12;2006:2;2086:55;2137:3;2128:6;2117:9;2113:22;2086:55;;;2062:80;;-1:-1;2234:2;2219:18;;2206:32;2258:18;2247:30;;2244:2;;;2290:1;2287;2280:12;2244:2;2325:55;2376:3;2367:6;2356:9;2352:22;2325:55;;;2318:4;2311:5;2307:16;2300:81;2163:229;1828:574;;;;;2446:1652;;2566:4;2554:9;2549:3;2545:19;2541:30;2538:2;;;2584:1;2581;2574:12;2538:2;2602:20;2617:4;2602:20;;;2593:29;-1:-1;2673:31;;2724:18;2713:30;;2710:2;;;2756:1;2753;2746:12;2710:2;2790:55;2841:3;2832:6;2821:9;2817:22;2790:55;;;2766:80;;-1:-1;2944:2;2929:18;;2916:32;2968:18;2957:30;;2954:2;;;3000:1;2997;2990:12;2954:2;3035:76;3107:3;3098:6;3087:9;3083:22;3035:76;;;3028:4;3021:5;3017:16;3010:102;2867:256;3203:2;3192:9;3188:18;3175:32;3227:18;3219:6;3216:30;3213:2;;;3259:1;3256;3249:12;3213:2;3294:55;3345:3;3336:6;3325:9;3321:22;3294:55;;;3287:4;3280:5;3276:16;3269:81;3133:228;3441:2;3430:9;3426:18;3413:32;3465:18;3457:6;3454:30;3451:2;;;3497:1;3494;3487:12;3451:2;3532:55;3583:3;3574:6;3563:9;3559:22;3532:55;;;3525:4;3518:5;3514:16;3507:81;3371:228;3679:3;3668:9;3664:19;3651:33;3704:18;3696:6;3693:30;3690:2;;;3736:1;3733;3726:12;3690:2;3771:55;3822:3;3813:6;3802:9;3798:22;3771:55;;;3764:4;3757:5;3753:16;3746:81;3609:229;3917:3;3906:9;3902:19;3889:33;3942:18;3934:6;3931:30;3928:2;;;3974:1;3971;3964:12;3928:2;4009:67;4072:3;4063:6;4052:9;4048:22;4009:67;;;4002:4;3995:5;3991:16;3984:93;3848:240;2532:1566;;;;;4134:1064;;4250:4;4238:9;4233:3;4229:19;4225:30;4222:2;;;4268:1;4265;4258:12;4222:2;4286:20;4301:4;4286:20;;;4277:29;-1:-1;4357:31;;4408:18;4397:30;;4394:2;;;4440:1;4437;4430:12;4394:2;4474:55;4525:3;4516:6;4505:9;4501:22;4474:55;;;4450:80;;-1:-1;4619:2;4604:18;;4591:32;4643:18;4632:30;;4629:2;;;4675:1;4672;4665:12;4629:2;4710:55;4761:3;4752:6;4741:9;4737:22;4710:55;;;4703:4;4696:5;4692:16;4685:81;4551:226;4859:2;4848:9;4844:18;4831:32;4883:18;4875:6;4872:30;4869:2;;;4915:1;4912;4905:12;4869:2;4950:80;5026:3;5017:6;5006:9;5002:22;4950:80;;;4943:4;4936:5;4932:16;4925:106;4787:255;5097:2;5130:46;5172:3;5163:6;5152:9;5148:22;5130:46;;;5123:4;5116:5;5112:16;5105:72;5052:136;4216:982;;;;;5205:347;;5319:2;5307:9;5298:7;5294:23;5290:32;5287:2;;;5335:1;5332;5325:12;5287:2;5370:31;;5421:18;5410:30;;5407:2;;;5453:1;5450;5443:12;5407:2;5473:63;5528:7;5519:6;5508:9;5504:22;5473:63;;;5463:73;5281:271;-1:-1;;;;5281:271;5559:381;;5690:2;5678:9;5669:7;5665:23;5661:32;5658:2;;;5706:1;5703;5696:12;5658:2;5741:31;;5792:18;5781:30;;5778:2;;;5824:1;5821;5814:12;5778:2;5844:80;5916:7;5907:6;5896:9;5892:22;5844:80;;5976:757;;6119:56;6169:5;6119:56;;;6193:6;6188:3;6181:19;6217:4;6212:3;6208:14;6201:21;;6265:3;6307:4;6299:6;6295:17;6290:3;6286:27;6333:58;6385:5;6333:58;;;6412:1;6397:297;6422:6;6419:1;6416:13;6397:297;;;6484:9;6478:4;6474:20;6469:3;6462:33;6510:70;6575:4;6566:6;6560:13;6510:70;;;6502:78;;6597:62;6652:6;6597:62;;;6682:4;6673:14;;;;;6587:72;-1:-1;6444:1;6437:9;6397:297;;;-1:-1;6707:4;;6098:635;-1:-1;;;;;;6098:635;6802:892;;6983:77;7054:5;6983:77;;;7078:6;7073:3;7066:19;7102:4;7097:3;7093:14;7086:21;;7150:3;7192:4;7184:6;7180:17;7175:3;7171:27;7218:79;7291:5;7218:79;;;7318:1;7303:352;7328:6;7325:1;7322:13;7303:352;;;7390:9;7384:4;7380:20;7375:3;7368:33;7416:104;7515:4;7506:6;7500:13;7416:104;;;7408:112;;7537:83;7613:6;7537:83;;;7643:4;7634:14;;;;;7527:93;-1:-1;7350:1;7343:9;7303:352;;7702:101;7769:28;7791:5;7769:28;;;7764:3;7757:41;7751:52;;;7810:292;;7908:35;7937:5;7908:35;;;7960:6;7955:3;7948:19;7972:63;8028:6;8021:4;8016:3;8012:14;8005:4;7998:5;7994:16;7972:63;;;8067:29;8089:6;8067:29;;;8047:50;;;8060:4;8047:50;;7888:214;-1:-1;;;7888:214;8154:623;8355:22;;8285:4;8389:37;;;8154:623;;8276:14;;;;8441:68;8276:14;8355:22;8441:68;;;8433:76;;8305:216;8600:4;8593:5;8589:16;8583:23;8651:3;8645:4;8641:14;8634:4;8629:3;8625:14;8618:38;8671:68;8734:4;8721:11;8671:68;;;8663:76;8258:519;-1:-1;;;;;8258:519;8855:1636;9082:22;;9012:4;9116:37;;;8855:1636;;9003:14;;;;9168:68;9003:14;9082:22;9168:68;;;9160:76;;9032:216;9333:4;9326:5;9322:16;9316:23;9384:3;9378:4;9374:14;9367:4;9362:3;9358:14;9351:38;9404:110;9509:4;9496:11;9404:110;;;9396:118;;9258:268;9604:4;9597:5;9593:16;9587:23;9655:3;9649:4;9645:14;9638:4;9633:3;9629:14;9622:38;9675:68;9738:4;9725:11;9675:68;;;9667:76;;9536:219;9833:4;9826:5;9822:16;9816:23;9884:3;9878:4;9874:14;9867:4;9862:3;9858:14;9851:38;9904:68;9967:4;9954:11;9904:68;;;9896:76;;9765:219;10062:4;10055:5;10051:16;10045:23;10113:3;10107:4;10103:14;10096:4;10091:3;10087:14;10080:38;10133:68;10196:4;10183:11;10133:68;;;10125:76;;9994:219;10290:4;10283:5;10279:16;10273:23;10341:3;10335:4;10331:14;10324:4;10319:3;10315:14;10308:38;10361:92;10448:4;10435:11;10361:92;;10553:1082;10768:22;;10698:4;10802:37;;;10553:1082;;10689:14;;;;10854:68;10689:14;10768:22;10854:68;;;10846:76;;10718:216;11010:4;11003:5;10999:16;10993:23;11061:3;11055:4;11051:14;11044:4;11039:3;11035:14;11028:38;11081:68;11144:4;11131:11;11081:68;;;11073:76;;10944:217;11241:4;11234:5;11230:16;11224:23;11292:3;11286:4;11282:14;11275:4;11270:3;11266:14;11259:38;11312:118;11425:4;11412:11;11312:118;;;11304:126;;11171:271;11523:4;11516:5;11512:16;11506:23;11541:56;11591:4;11586:3;11582:14;11569:11;11541:56;;;-1:-1;11626:4;10671:964;-1:-1;;;10671:964;12782:110;12855:31;12880:5;12855:31;;12899:433;13103:2;13117:47;;;13088:18;;13178:144;13088:18;13308:6;13178:144;;13339:181;13441:2;13426:18;;13455:55;13430:9;13483:6;13455:55;;;13412:108;;;;;13527:349;13689:2;13703:47;;;13674:18;;13764:102;13674:18;13852:6;13764:102;;13883:193;13991:2;13976:18;;14005:61;13980:9;14039:6;14005:61;;14083:256;14145:2;14139:9;14171:17;;;14246:18;14231:34;;14267:22;;;14228:62;14225:2;;;14303:1;14300;14293:12;14225:2;14319;14312:22;14123:216;;-1:-1;14123:216;14346:260;;14507:18;14499:6;14496:30;14493:2;;;14539:1;14536;14529:12;14493:2;-1:-1;14568:4;14556:17;;;14586:15;;14430:176;14613:255;;14753:18;14745:6;14742:30;14739:2;;;14785:1;14782;14775:12;14739:2;-1:-1;14858:4;14829;14806:17;;;;-1:-1;;14802:33;14848:15;;14676:192;15143:123;15254:4;15242:17;;15223:43;15430:109;15522:12;;15506:33;16065:92;16138:13;16131:21;;16114:43;16350:145;16431:6;16426:3;16421;16408:30;-1:-1;16487:1;16469:16;;16462:27;16401:94;16504:268;16569:1;16576:101;16590:6;16587:1;16584:13;16576:101;;;16657:11;;;16651:18;16638:11;;;16631:39;16612:2;16605:10;16576:101;;;16692:6;16689:1;16686:13;16683:2;;;16757:1;16748:6;16743:3;16739:16;16732:27;16683:2;16553:219;;;;;16780:97;16868:2;16848:14;-1:-1;;16844:28;;16828:49",
  "source": "// SPDX-License-Identifier: MIT\r\npragma solidity >=0.4.22 <0.9.0;\r\npragma experimental ABIEncoderV2;\r\n\r\nimport \"../Test.sol\";\r\n\r\ncontract MockedTest is Test {\r\n    function mock_getTestStructByToken(string memory token)\r\n        public\r\n        view\r\n        returns (TestStruct memory)\r\n    {\r\n        TestStruct memory testStruct = mapTestStruct[token];\r\n        testStruct.token = token;\r\n        testStruct.name = \"Mock name\";\r\n        testStruct.isBlocked = true;\r\n\r\n        return testStruct;\r\n    }\r\n\r\n    function mock_testStructExists(string memory token)\r\n        public\r\n        view\r\n        returns (bool)\r\n    {\r\n        TestStruct memory testStruct = mock_getTestStructByToken(token);\r\n\r\n        return\r\n            keccak256(abi.encodePacked(testStruct.token)) ==\r\n            keccak256(abi.encodePacked(token));\r\n    }\r\n}\r\n",
  "sourcePath": "C:/Users/skott/Desktop/Projects/_Blockchain/Projects/MoviesFE/contracts/mocks/MockedTest.sol",
  "ast": {
    "absolutePath": "/C/Users/skott/Desktop/Projects/_Blockchain/Projects/MoviesFE/contracts/mocks/MockedTest.sol",
    "exportedSymbols": {
      "MockedTest": [
        1042
      ]
    },
    "id": 1043,
    "nodeType": "SourceUnit",
    "nodes": [
      {
        "id": 974,
        "literals": [
          "solidity",
          ">=",
          "0.4",
          ".22",
          "<",
          "0.9",
          ".0"
        ],
        "nodeType": "PragmaDirective",
        "src": "33:32:8"
      },
      {
        "id": 975,
        "literals": [
          "experimental",
          "ABIEncoderV2"
        ],
        "nodeType": "PragmaDirective",
        "src": "67:33:8"
      },
      {
        "absolutePath": "/C/Users/skott/Desktop/Projects/_Blockchain/Projects/MoviesFE/contracts/Test.sol",
        "file": "../Test.sol",
        "id": 976,
        "nodeType": "ImportDirective",
        "scope": 1043,
        "sourceUnit": 612,
        "src": "104:21:8",
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "baseContracts": [
          {
            "arguments": null,
            "baseName": {
              "contractScope": null,
              "id": 977,
              "name": "Test",
              "nodeType": "UserDefinedTypeName",
              "referencedDeclaration": 611,
              "src": "152:4:8",
              "typeDescriptions": {
                "typeIdentifier": "t_contract$_Test_$611",
                "typeString": "contract Test"
              }
            },
            "id": 978,
            "nodeType": "InheritanceSpecifier",
            "src": "152:4:8"
          }
        ],
        "contractDependencies": [
          611
        ],
        "contractKind": "contract",
        "documentation": null,
        "fullyImplemented": true,
        "id": 1042,
        "linearizedBaseContracts": [
          1042,
          611
        ],
        "name": "MockedTest",
        "nodeType": "ContractDefinition",
        "nodes": [
          {
            "body": {
              "id": 1011,
              "nodeType": "Block",
              "src": "292:213:8",
              "statements": [
                {
                  "assignments": [
                    986
                  ],
                  "declarations": [
                    {
                      "constant": false,
                      "id": 986,
                      "name": "testStruct",
                      "nodeType": "VariableDeclaration",
                      "scope": 1011,
                      "src": "303:28:8",
                      "stateVariable": false,
                      "storageLocation": "memory",
                      "typeDescriptions": {
                        "typeIdentifier": "t_struct$_TestStruct_$445_memory_ptr",
                        "typeString": "struct Test.TestStruct"
                      },
                      "typeName": {
                        "contractScope": null,
                        "id": 985,
                        "name": "TestStruct",
                        "nodeType": "UserDefinedTypeName",
                        "referencedDeclaration": 445,
                        "src": "303:10:8",
                        "typeDescriptions": {
                          "typeIdentifier": "t_struct$_TestStruct_$445_storage_ptr",
                          "typeString": "struct Test.TestStruct"
                        }
                      },
                      "value": null,
                      "visibility": "internal"
                    }
                  ],
                  "id": 990,
                  "initialValue": {
                    "argumentTypes": null,
                    "baseExpression": {
                      "argumentTypes": null,
                      "id": 987,
                      "name": "mapTestStruct",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 471,
                      "src": "334:13:8",
                      "typeDescriptions": {
                        "typeIdentifier": "t_mapping$_t_string_memory_$_t_struct$_TestStruct_$445_storage_$",
                        "typeString": "mapping(string memory => struct Test.TestStruct storage ref)"
                      }
                    },
                    "id": 989,
                    "indexExpression": {
                      "argumentTypes": null,
                      "id": 988,
                      "name": "token",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 980,
                      "src": "348:5:8",
                      "typeDescriptions": {
                        "typeIdentifier": "t_string_memory_ptr",
                        "typeString": "string memory"
                      }
                    },
                    "isConstant": false,
                    "isLValue": true,
                    "isPure": false,
                    "lValueRequested": false,
                    "nodeType": "IndexAccess",
                    "src": "334:20:8",
                    "typeDescriptions": {
                      "typeIdentifier": "t_struct$_TestStruct_$445_storage",
                      "typeString": "struct Test.TestStruct storage ref"
                    }
                  },
                  "nodeType": "VariableDeclarationStatement",
                  "src": "303:51:8"
                },
                {
                  "expression": {
                    "argumentTypes": null,
                    "id": 995,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "argumentTypes": null,
                      "expression": {
                        "argumentTypes": null,
                        "id": 991,
                        "name": "testStruct",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 986,
                        "src": "365:10:8",
                        "typeDescriptions": {
                          "typeIdentifier": "t_struct$_TestStruct_$445_memory_ptr",
                          "typeString": "struct Test.TestStruct memory"
                        }
                      },
                      "id": 993,
                      "isConstant": false,
                      "isLValue": true,
                      "isPure": false,
                      "lValueRequested": true,
                      "memberName": "token",
                      "nodeType": "MemberAccess",
                      "referencedDeclaration": 438,
                      "src": "365:16:8",
                      "typeDescriptions": {
                        "typeIdentifier": "t_string_memory",
                        "typeString": "string memory"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "argumentTypes": null,
                      "id": 994,
                      "name": "token",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 980,
                      "src": "384:5:8",
                      "typeDescriptions": {
                        "typeIdentifier": "t_string_memory_ptr",
                        "typeString": "string memory"
                      }
                    },
                    "src": "365:24:8",
                    "typeDescriptions": {
                      "typeIdentifier": "t_string_memory",
                      "typeString": "string memory"
                    }
                  },
                  "id": 996,
                  "nodeType": "ExpressionStatement",
                  "src": "365:24:8"
                },
                {
                  "expression": {
                    "argumentTypes": null,
                    "id": 1001,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "argumentTypes": null,
                      "expression": {
                        "argumentTypes": null,
                        "id": 997,
                        "name": "testStruct",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 986,
                        "src": "400:10:8",
                        "typeDescriptions": {
                          "typeIdentifier": "t_struct$_TestStruct_$445_memory_ptr",
                          "typeString": "struct Test.TestStruct memory"
                        }
                      },
                      "id": 999,
                      "isConstant": false,
                      "isLValue": true,
                      "isPure": false,
                      "lValueRequested": true,
                      "memberName": "name",
                      "nodeType": "MemberAccess",
                      "referencedDeclaration": 440,
                      "src": "400:15:8",
                      "typeDescriptions": {
                        "typeIdentifier": "t_string_memory",
                        "typeString": "string memory"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "argumentTypes": null,
                      "hexValue": "4d6f636b206e616d65",
                      "id": 1000,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": true,
                      "kind": "string",
                      "lValueRequested": false,
                      "nodeType": "Literal",
                      "src": "418:11:8",
                      "subdenomination": null,
                      "typeDescriptions": {
                        "typeIdentifier": "t_stringliteral_f3f8261470cd5d16d963357382f53d151152184c3b833920a96c4d5a6da0b31a",
                        "typeString": "literal_string \"Mock name\""
                      },
                      "value": "Mock name"
                    },
                    "src": "400:29:8",
                    "typeDescriptions": {
                      "typeIdentifier": "t_string_memory",
                      "typeString": "string memory"
                    }
                  },
                  "id": 1002,
                  "nodeType": "ExpressionStatement",
                  "src": "400:29:8"
                },
                {
                  "expression": {
                    "argumentTypes": null,
                    "id": 1007,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "argumentTypes": null,
                      "expression": {
                        "argumentTypes": null,
                        "id": 1003,
                        "name": "testStruct",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 986,
                        "src": "440:10:8",
                        "typeDescriptions": {
                          "typeIdentifier": "t_struct$_TestStruct_$445_memory_ptr",
                          "typeString": "struct Test.TestStruct memory"
                        }
                      },
                      "id": 1005,
                      "isConstant": false,
                      "isLValue": true,
                      "isPure": false,
                      "lValueRequested": true,
                      "memberName": "isBlocked",
                      "nodeType": "MemberAccess",
                      "referencedDeclaration": 444,
                      "src": "440:20:8",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bool",
                        "typeString": "bool"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "argumentTypes": null,
                      "hexValue": "74727565",
                      "id": 1006,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": true,
                      "kind": "bool",
                      "lValueRequested": false,
                      "nodeType": "Literal",
                      "src": "463:4:8",
                      "subdenomination": null,
                      "typeDescriptions": {
                        "typeIdentifier": "t_bool",
                        "typeString": "bool"
                      },
                      "value": "true"
                    },
                    "src": "440:27:8",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "id": 1008,
                  "nodeType": "ExpressionStatement",
                  "src": "440:27:8"
                },
                {
                  "expression": {
                    "argumentTypes": null,
                    "id": 1009,
                    "name": "testStruct",
                    "nodeType": "Identifier",
                    "overloadedDeclarations": [],
                    "referencedDeclaration": 986,
                    "src": "487:10:8",
                    "typeDescriptions": {
                      "typeIdentifier": "t_struct$_TestStruct_$445_memory_ptr",
                      "typeString": "struct Test.TestStruct memory"
                    }
                  },
                  "functionReturnParameters": 984,
                  "id": 1010,
                  "nodeType": "Return",
                  "src": "480:17:8"
                }
              ]
            },
            "documentation": null,
            "id": 1012,
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "mock_getTestStructByToken",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 981,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 980,
                  "name": "token",
                  "nodeType": "VariableDeclaration",
                  "scope": 1012,
                  "src": "199:19:8",
                  "stateVariable": false,
                  "storageLocation": "memory",
                  "typeDescriptions": {
                    "typeIdentifier": "t_string_memory_ptr",
                    "typeString": "string"
                  },
                  "typeName": {
                    "id": 979,
                    "name": "string",
                    "nodeType": "ElementaryTypeName",
                    "src": "199:6:8",
                    "typeDescriptions": {
                      "typeIdentifier": "t_string_storage_ptr",
                      "typeString": "string"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "198:21:8"
            },
            "returnParameters": {
              "id": 984,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 983,
                  "name": "",
                  "nodeType": "VariableDeclaration",
                  "scope": 1012,
                  "src": "268:17:8",
                  "stateVariable": false,
                  "storageLocation": "memory",
                  "typeDescriptions": {
                    "typeIdentifier": "t_struct$_TestStruct_$445_memory_ptr",
                    "typeString": "struct Test.TestStruct"
                  },
                  "typeName": {
                    "contractScope": null,
                    "id": 982,
                    "name": "TestStruct",
                    "nodeType": "UserDefinedTypeName",
                    "referencedDeclaration": 445,
                    "src": "268:10:8",
                    "typeDescriptions": {
                      "typeIdentifier": "t_struct$_TestStruct_$445_storage_ptr",
                      "typeString": "struct Test.TestStruct"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "267:19:8"
            },
            "scope": 1042,
            "src": "164:341:8",
            "stateMutability": "view",
            "superFunction": null,
            "visibility": "public"
          },
          {
            "body": {
              "id": 1040,
              "nodeType": "Block",
              "src": "624:211:8",
              "statements": [
                {
                  "assignments": [
                    1020
                  ],
                  "declarations": [
                    {
                      "constant": false,
                      "id": 1020,
                      "name": "testStruct",
                      "nodeType": "VariableDeclaration",
                      "scope": 1040,
                      "src": "635:28:8",
                      "stateVariable": false,
                      "storageLocation": "memory",
                      "typeDescriptions": {
                        "typeIdentifier": "t_struct$_TestStruct_$445_memory_ptr",
                        "typeString": "struct Test.TestStruct"
                      },
                      "typeName": {
                        "contractScope": null,
                        "id": 1019,
                        "name": "TestStruct",
                        "nodeType": "UserDefinedTypeName",
                        "referencedDeclaration": 445,
                        "src": "635:10:8",
                        "typeDescriptions": {
                          "typeIdentifier": "t_struct$_TestStruct_$445_storage_ptr",
                          "typeString": "struct Test.TestStruct"
                        }
                      },
                      "value": null,
                      "visibility": "internal"
                    }
                  ],
                  "id": 1024,
                  "initialValue": {
                    "argumentTypes": null,
                    "arguments": [
                      {
                        "argumentTypes": null,
                        "id": 1022,
                        "name": "token",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 1014,
                        "src": "692:5:8",
                        "typeDescriptions": {
                          "typeIdentifier": "t_string_memory_ptr",
                          "typeString": "string memory"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_string_memory_ptr",
                          "typeString": "string memory"
                        }
                      ],
                      "id": 1021,
                      "name": "mock_getTestStructByToken",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 1012,
                      "src": "666:25:8",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_view$_t_string_memory_ptr_$returns$_t_struct$_TestStruct_$445_memory_ptr_$",
                        "typeString": "function (string memory) view returns (struct Test.TestStruct memory)"
                      }
                    },
                    "id": 1023,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "666:32:8",
                    "typeDescriptions": {
                      "typeIdentifier": "t_struct$_TestStruct_$445_memory_ptr",
                      "typeString": "struct Test.TestStruct memory"
                    }
                  },
                  "nodeType": "VariableDeclarationStatement",
                  "src": "635:63:8"
                },
                {
                  "expression": {
                    "argumentTypes": null,
                    "commonType": {
                      "typeIdentifier": "t_bytes32",
                      "typeString": "bytes32"
                    },
                    "id": 1038,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftExpression": {
                      "argumentTypes": null,
                      "arguments": [
                        {
                          "argumentTypes": null,
                          "arguments": [
                            {
                              "argumentTypes": null,
                              "expression": {
                                "argumentTypes": null,
                                "id": 1028,
                                "name": "testStruct",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 1020,
                                "src": "758:10:8",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_struct$_TestStruct_$445_memory_ptr",
                                  "typeString": "struct Test.TestStruct memory"
                                }
                              },
                              "id": 1029,
                              "isConstant": false,
                              "isLValue": true,
                              "isPure": false,
                              "lValueRequested": false,
                              "memberName": "token",
                              "nodeType": "MemberAccess",
                              "referencedDeclaration": 438,
                              "src": "758:16:8",
                              "typeDescriptions": {
                                "typeIdentifier": "t_string_memory",
                                "typeString": "string memory"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_string_memory",
                                "typeString": "string memory"
                              }
                            ],
                            "expression": {
                              "argumentTypes": null,
                              "id": 1026,
                              "name": "abi",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 1044,
                              "src": "741:3:8",
                              "typeDescriptions": {
                                "typeIdentifier": "t_magic_abi",
                                "typeString": "abi"
                              }
                            },
                            "id": 1027,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "lValueRequested": false,
                            "memberName": "encodePacked",
                            "nodeType": "MemberAccess",
                            "referencedDeclaration": null,
                            "src": "741:16:8",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_abiencodepacked_pure$__$returns$_t_bytes_memory_ptr_$",
                              "typeString": "function () pure returns (bytes memory)"
                            }
                          },
                          "id": 1030,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "741:34:8",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bytes_memory_ptr",
                            "typeString": "bytes memory"
                          }
                        }
                      ],
                      "expression": {
                        "argumentTypes": [
                          {
                            "typeIdentifier": "t_bytes_memory_ptr",
                            "typeString": "bytes memory"
                          }
                        ],
                        "id": 1025,
                        "name": "keccak256",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 1051,
                        "src": "731:9:8",
                        "typeDescriptions": {
                          "typeIdentifier": "t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$",
                          "typeString": "function (bytes memory) pure returns (bytes32)"
                        }
                      },
                      "id": 1031,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "kind": "functionCall",
                      "lValueRequested": false,
                      "names": [],
                      "nodeType": "FunctionCall",
                      "src": "731:45:8",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bytes32",
                        "typeString": "bytes32"
                      }
                    },
                    "nodeType": "BinaryOperation",
                    "operator": "==",
                    "rightExpression": {
                      "argumentTypes": null,
                      "arguments": [
                        {
                          "argumentTypes": null,
                          "arguments": [
                            {
                              "argumentTypes": null,
                              "id": 1035,
                              "name": "token",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 1014,
                              "src": "820:5:8",
                              "typeDescriptions": {
                                "typeIdentifier": "t_string_memory_ptr",
                                "typeString": "string memory"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_string_memory_ptr",
                                "typeString": "string memory"
                              }
                            ],
                            "expression": {
                              "argumentTypes": null,
                              "id": 1033,
                              "name": "abi",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 1044,
                              "src": "803:3:8",
                              "typeDescriptions": {
                                "typeIdentifier": "t_magic_abi",
                                "typeString": "abi"
                              }
                            },
                            "id": 1034,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "lValueRequested": false,
                            "memberName": "encodePacked",
                            "nodeType": "MemberAccess",
                            "referencedDeclaration": null,
                            "src": "803:16:8",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_abiencodepacked_pure$__$returns$_t_bytes_memory_ptr_$",
                              "typeString": "function () pure returns (bytes memory)"
                            }
                          },
                          "id": 1036,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "803:23:8",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bytes_memory_ptr",
                            "typeString": "bytes memory"
                          }
                        }
                      ],
                      "expression": {
                        "argumentTypes": [
                          {
                            "typeIdentifier": "t_bytes_memory_ptr",
                            "typeString": "bytes memory"
                          }
                        ],
                        "id": 1032,
                        "name": "keccak256",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 1051,
                        "src": "793:9:8",
                        "typeDescriptions": {
                          "typeIdentifier": "t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$",
                          "typeString": "function (bytes memory) pure returns (bytes32)"
                        }
                      },
                      "id": 1037,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "kind": "functionCall",
                      "lValueRequested": false,
                      "names": [],
                      "nodeType": "FunctionCall",
                      "src": "793:34:8",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bytes32",
                        "typeString": "bytes32"
                      }
                    },
                    "src": "731:96:8",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "functionReturnParameters": 1018,
                  "id": 1039,
                  "nodeType": "Return",
                  "src": "711:116:8"
                }
              ]
            },
            "documentation": null,
            "id": 1041,
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "mock_testStructExists",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 1015,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 1014,
                  "name": "token",
                  "nodeType": "VariableDeclaration",
                  "scope": 1041,
                  "src": "544:19:8",
                  "stateVariable": false,
                  "storageLocation": "memory",
                  "typeDescriptions": {
                    "typeIdentifier": "t_string_memory_ptr",
                    "typeString": "string"
                  },
                  "typeName": {
                    "id": 1013,
                    "name": "string",
                    "nodeType": "ElementaryTypeName",
                    "src": "544:6:8",
                    "typeDescriptions": {
                      "typeIdentifier": "t_string_storage_ptr",
                      "typeString": "string"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "543:21:8"
            },
            "returnParameters": {
              "id": 1018,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 1017,
                  "name": "",
                  "nodeType": "VariableDeclaration",
                  "scope": 1041,
                  "src": "613:4:8",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bool",
                    "typeString": "bool"
                  },
                  "typeName": {
                    "id": 1016,
                    "name": "bool",
                    "nodeType": "ElementaryTypeName",
                    "src": "613:4:8",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "612:6:8"
            },
            "scope": 1042,
            "src": "513:322:8",
            "stateMutability": "view",
            "superFunction": null,
            "visibility": "public"
          }
        ],
        "scope": 1043,
        "src": "129:709:8"
      }
    ],
    "src": "33:807:8"
  },
  "legacyAST": {
    "absolutePath": "/C/Users/skott/Desktop/Projects/_Blockchain/Projects/MoviesFE/contracts/mocks/MockedTest.sol",
    "exportedSymbols": {
      "MockedTest": [
        1042
      ]
    },
    "id": 1043,
    "nodeType": "SourceUnit",
    "nodes": [
      {
        "id": 974,
        "literals": [
          "solidity",
          ">=",
          "0.4",
          ".22",
          "<",
          "0.9",
          ".0"
        ],
        "nodeType": "PragmaDirective",
        "src": "33:32:8"
      },
      {
        "id": 975,
        "literals": [
          "experimental",
          "ABIEncoderV2"
        ],
        "nodeType": "PragmaDirective",
        "src": "67:33:8"
      },
      {
        "absolutePath": "/C/Users/skott/Desktop/Projects/_Blockchain/Projects/MoviesFE/contracts/Test.sol",
        "file": "../Test.sol",
        "id": 976,
        "nodeType": "ImportDirective",
        "scope": 1043,
        "sourceUnit": 612,
        "src": "104:21:8",
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "baseContracts": [
          {
            "arguments": null,
            "baseName": {
              "contractScope": null,
              "id": 977,
              "name": "Test",
              "nodeType": "UserDefinedTypeName",
              "referencedDeclaration": 611,
              "src": "152:4:8",
              "typeDescriptions": {
                "typeIdentifier": "t_contract$_Test_$611",
                "typeString": "contract Test"
              }
            },
            "id": 978,
            "nodeType": "InheritanceSpecifier",
            "src": "152:4:8"
          }
        ],
        "contractDependencies": [
          611
        ],
        "contractKind": "contract",
        "documentation": null,
        "fullyImplemented": true,
        "id": 1042,
        "linearizedBaseContracts": [
          1042,
          611
        ],
        "name": "MockedTest",
        "nodeType": "ContractDefinition",
        "nodes": [
          {
            "body": {
              "id": 1011,
              "nodeType": "Block",
              "src": "292:213:8",
              "statements": [
                {
                  "assignments": [
                    986
                  ],
                  "declarations": [
                    {
                      "constant": false,
                      "id": 986,
                      "name": "testStruct",
                      "nodeType": "VariableDeclaration",
                      "scope": 1011,
                      "src": "303:28:8",
                      "stateVariable": false,
                      "storageLocation": "memory",
                      "typeDescriptions": {
                        "typeIdentifier": "t_struct$_TestStruct_$445_memory_ptr",
                        "typeString": "struct Test.TestStruct"
                      },
                      "typeName": {
                        "contractScope": null,
                        "id": 985,
                        "name": "TestStruct",
                        "nodeType": "UserDefinedTypeName",
                        "referencedDeclaration": 445,
                        "src": "303:10:8",
                        "typeDescriptions": {
                          "typeIdentifier": "t_struct$_TestStruct_$445_storage_ptr",
                          "typeString": "struct Test.TestStruct"
                        }
                      },
                      "value": null,
                      "visibility": "internal"
                    }
                  ],
                  "id": 990,
                  "initialValue": {
                    "argumentTypes": null,
                    "baseExpression": {
                      "argumentTypes": null,
                      "id": 987,
                      "name": "mapTestStruct",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 471,
                      "src": "334:13:8",
                      "typeDescriptions": {
                        "typeIdentifier": "t_mapping$_t_string_memory_$_t_struct$_TestStruct_$445_storage_$",
                        "typeString": "mapping(string memory => struct Test.TestStruct storage ref)"
                      }
                    },
                    "id": 989,
                    "indexExpression": {
                      "argumentTypes": null,
                      "id": 988,
                      "name": "token",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 980,
                      "src": "348:5:8",
                      "typeDescriptions": {
                        "typeIdentifier": "t_string_memory_ptr",
                        "typeString": "string memory"
                      }
                    },
                    "isConstant": false,
                    "isLValue": true,
                    "isPure": false,
                    "lValueRequested": false,
                    "nodeType": "IndexAccess",
                    "src": "334:20:8",
                    "typeDescriptions": {
                      "typeIdentifier": "t_struct$_TestStruct_$445_storage",
                      "typeString": "struct Test.TestStruct storage ref"
                    }
                  },
                  "nodeType": "VariableDeclarationStatement",
                  "src": "303:51:8"
                },
                {
                  "expression": {
                    "argumentTypes": null,
                    "id": 995,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "argumentTypes": null,
                      "expression": {
                        "argumentTypes": null,
                        "id": 991,
                        "name": "testStruct",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 986,
                        "src": "365:10:8",
                        "typeDescriptions": {
                          "typeIdentifier": "t_struct$_TestStruct_$445_memory_ptr",
                          "typeString": "struct Test.TestStruct memory"
                        }
                      },
                      "id": 993,
                      "isConstant": false,
                      "isLValue": true,
                      "isPure": false,
                      "lValueRequested": true,
                      "memberName": "token",
                      "nodeType": "MemberAccess",
                      "referencedDeclaration": 438,
                      "src": "365:16:8",
                      "typeDescriptions": {
                        "typeIdentifier": "t_string_memory",
                        "typeString": "string memory"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "argumentTypes": null,
                      "id": 994,
                      "name": "token",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 980,
                      "src": "384:5:8",
                      "typeDescriptions": {
                        "typeIdentifier": "t_string_memory_ptr",
                        "typeString": "string memory"
                      }
                    },
                    "src": "365:24:8",
                    "typeDescriptions": {
                      "typeIdentifier": "t_string_memory",
                      "typeString": "string memory"
                    }
                  },
                  "id": 996,
                  "nodeType": "ExpressionStatement",
                  "src": "365:24:8"
                },
                {
                  "expression": {
                    "argumentTypes": null,
                    "id": 1001,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "argumentTypes": null,
                      "expression": {
                        "argumentTypes": null,
                        "id": 997,
                        "name": "testStruct",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 986,
                        "src": "400:10:8",
                        "typeDescriptions": {
                          "typeIdentifier": "t_struct$_TestStruct_$445_memory_ptr",
                          "typeString": "struct Test.TestStruct memory"
                        }
                      },
                      "id": 999,
                      "isConstant": false,
                      "isLValue": true,
                      "isPure": false,
                      "lValueRequested": true,
                      "memberName": "name",
                      "nodeType": "MemberAccess",
                      "referencedDeclaration": 440,
                      "src": "400:15:8",
                      "typeDescriptions": {
                        "typeIdentifier": "t_string_memory",
                        "typeString": "string memory"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "argumentTypes": null,
                      "hexValue": "4d6f636b206e616d65",
                      "id": 1000,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": true,
                      "kind": "string",
                      "lValueRequested": false,
                      "nodeType": "Literal",
                      "src": "418:11:8",
                      "subdenomination": null,
                      "typeDescriptions": {
                        "typeIdentifier": "t_stringliteral_f3f8261470cd5d16d963357382f53d151152184c3b833920a96c4d5a6da0b31a",
                        "typeString": "literal_string \"Mock name\""
                      },
                      "value": "Mock name"
                    },
                    "src": "400:29:8",
                    "typeDescriptions": {
                      "typeIdentifier": "t_string_memory",
                      "typeString": "string memory"
                    }
                  },
                  "id": 1002,
                  "nodeType": "ExpressionStatement",
                  "src": "400:29:8"
                },
                {
                  "expression": {
                    "argumentTypes": null,
                    "id": 1007,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "argumentTypes": null,
                      "expression": {
                        "argumentTypes": null,
                        "id": 1003,
                        "name": "testStruct",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 986,
                        "src": "440:10:8",
                        "typeDescriptions": {
                          "typeIdentifier": "t_struct$_TestStruct_$445_memory_ptr",
                          "typeString": "struct Test.TestStruct memory"
                        }
                      },
                      "id": 1005,
                      "isConstant": false,
                      "isLValue": true,
                      "isPure": false,
                      "lValueRequested": true,
                      "memberName": "isBlocked",
                      "nodeType": "MemberAccess",
                      "referencedDeclaration": 444,
                      "src": "440:20:8",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bool",
                        "typeString": "bool"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "argumentTypes": null,
                      "hexValue": "74727565",
                      "id": 1006,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": true,
                      "kind": "bool",
                      "lValueRequested": false,
                      "nodeType": "Literal",
                      "src": "463:4:8",
                      "subdenomination": null,
                      "typeDescriptions": {
                        "typeIdentifier": "t_bool",
                        "typeString": "bool"
                      },
                      "value": "true"
                    },
                    "src": "440:27:8",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "id": 1008,
                  "nodeType": "ExpressionStatement",
                  "src": "440:27:8"
                },
                {
                  "expression": {
                    "argumentTypes": null,
                    "id": 1009,
                    "name": "testStruct",
                    "nodeType": "Identifier",
                    "overloadedDeclarations": [],
                    "referencedDeclaration": 986,
                    "src": "487:10:8",
                    "typeDescriptions": {
                      "typeIdentifier": "t_struct$_TestStruct_$445_memory_ptr",
                      "typeString": "struct Test.TestStruct memory"
                    }
                  },
                  "functionReturnParameters": 984,
                  "id": 1010,
                  "nodeType": "Return",
                  "src": "480:17:8"
                }
              ]
            },
            "documentation": null,
            "id": 1012,
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "mock_getTestStructByToken",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 981,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 980,
                  "name": "token",
                  "nodeType": "VariableDeclaration",
                  "scope": 1012,
                  "src": "199:19:8",
                  "stateVariable": false,
                  "storageLocation": "memory",
                  "typeDescriptions": {
                    "typeIdentifier": "t_string_memory_ptr",
                    "typeString": "string"
                  },
                  "typeName": {
                    "id": 979,
                    "name": "string",
                    "nodeType": "ElementaryTypeName",
                    "src": "199:6:8",
                    "typeDescriptions": {
                      "typeIdentifier": "t_string_storage_ptr",
                      "typeString": "string"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "198:21:8"
            },
            "returnParameters": {
              "id": 984,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 983,
                  "name": "",
                  "nodeType": "VariableDeclaration",
                  "scope": 1012,
                  "src": "268:17:8",
                  "stateVariable": false,
                  "storageLocation": "memory",
                  "typeDescriptions": {
                    "typeIdentifier": "t_struct$_TestStruct_$445_memory_ptr",
                    "typeString": "struct Test.TestStruct"
                  },
                  "typeName": {
                    "contractScope": null,
                    "id": 982,
                    "name": "TestStruct",
                    "nodeType": "UserDefinedTypeName",
                    "referencedDeclaration": 445,
                    "src": "268:10:8",
                    "typeDescriptions": {
                      "typeIdentifier": "t_struct$_TestStruct_$445_storage_ptr",
                      "typeString": "struct Test.TestStruct"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "267:19:8"
            },
            "scope": 1042,
            "src": "164:341:8",
            "stateMutability": "view",
            "superFunction": null,
            "visibility": "public"
          },
          {
            "body": {
              "id": 1040,
              "nodeType": "Block",
              "src": "624:211:8",
              "statements": [
                {
                  "assignments": [
                    1020
                  ],
                  "declarations": [
                    {
                      "constant": false,
                      "id": 1020,
                      "name": "testStruct",
                      "nodeType": "VariableDeclaration",
                      "scope": 1040,
                      "src": "635:28:8",
                      "stateVariable": false,
                      "storageLocation": "memory",
                      "typeDescriptions": {
                        "typeIdentifier": "t_struct$_TestStruct_$445_memory_ptr",
                        "typeString": "struct Test.TestStruct"
                      },
                      "typeName": {
                        "contractScope": null,
                        "id": 1019,
                        "name": "TestStruct",
                        "nodeType": "UserDefinedTypeName",
                        "referencedDeclaration": 445,
                        "src": "635:10:8",
                        "typeDescriptions": {
                          "typeIdentifier": "t_struct$_TestStruct_$445_storage_ptr",
                          "typeString": "struct Test.TestStruct"
                        }
                      },
                      "value": null,
                      "visibility": "internal"
                    }
                  ],
                  "id": 1024,
                  "initialValue": {
                    "argumentTypes": null,
                    "arguments": [
                      {
                        "argumentTypes": null,
                        "id": 1022,
                        "name": "token",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 1014,
                        "src": "692:5:8",
                        "typeDescriptions": {
                          "typeIdentifier": "t_string_memory_ptr",
                          "typeString": "string memory"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_string_memory_ptr",
                          "typeString": "string memory"
                        }
                      ],
                      "id": 1021,
                      "name": "mock_getTestStructByToken",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 1012,
                      "src": "666:25:8",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_view$_t_string_memory_ptr_$returns$_t_struct$_TestStruct_$445_memory_ptr_$",
                        "typeString": "function (string memory) view returns (struct Test.TestStruct memory)"
                      }
                    },
                    "id": 1023,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "666:32:8",
                    "typeDescriptions": {
                      "typeIdentifier": "t_struct$_TestStruct_$445_memory_ptr",
                      "typeString": "struct Test.TestStruct memory"
                    }
                  },
                  "nodeType": "VariableDeclarationStatement",
                  "src": "635:63:8"
                },
                {
                  "expression": {
                    "argumentTypes": null,
                    "commonType": {
                      "typeIdentifier": "t_bytes32",
                      "typeString": "bytes32"
                    },
                    "id": 1038,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftExpression": {
                      "argumentTypes": null,
                      "arguments": [
                        {
                          "argumentTypes": null,
                          "arguments": [
                            {
                              "argumentTypes": null,
                              "expression": {
                                "argumentTypes": null,
                                "id": 1028,
                                "name": "testStruct",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 1020,
                                "src": "758:10:8",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_struct$_TestStruct_$445_memory_ptr",
                                  "typeString": "struct Test.TestStruct memory"
                                }
                              },
                              "id": 1029,
                              "isConstant": false,
                              "isLValue": true,
                              "isPure": false,
                              "lValueRequested": false,
                              "memberName": "token",
                              "nodeType": "MemberAccess",
                              "referencedDeclaration": 438,
                              "src": "758:16:8",
                              "typeDescriptions": {
                                "typeIdentifier": "t_string_memory",
                                "typeString": "string memory"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_string_memory",
                                "typeString": "string memory"
                              }
                            ],
                            "expression": {
                              "argumentTypes": null,
                              "id": 1026,
                              "name": "abi",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 1044,
                              "src": "741:3:8",
                              "typeDescriptions": {
                                "typeIdentifier": "t_magic_abi",
                                "typeString": "abi"
                              }
                            },
                            "id": 1027,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "lValueRequested": false,
                            "memberName": "encodePacked",
                            "nodeType": "MemberAccess",
                            "referencedDeclaration": null,
                            "src": "741:16:8",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_abiencodepacked_pure$__$returns$_t_bytes_memory_ptr_$",
                              "typeString": "function () pure returns (bytes memory)"
                            }
                          },
                          "id": 1030,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "741:34:8",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bytes_memory_ptr",
                            "typeString": "bytes memory"
                          }
                        }
                      ],
                      "expression": {
                        "argumentTypes": [
                          {
                            "typeIdentifier": "t_bytes_memory_ptr",
                            "typeString": "bytes memory"
                          }
                        ],
                        "id": 1025,
                        "name": "keccak256",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 1051,
                        "src": "731:9:8",
                        "typeDescriptions": {
                          "typeIdentifier": "t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$",
                          "typeString": "function (bytes memory) pure returns (bytes32)"
                        }
                      },
                      "id": 1031,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "kind": "functionCall",
                      "lValueRequested": false,
                      "names": [],
                      "nodeType": "FunctionCall",
                      "src": "731:45:8",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bytes32",
                        "typeString": "bytes32"
                      }
                    },
                    "nodeType": "BinaryOperation",
                    "operator": "==",
                    "rightExpression": {
                      "argumentTypes": null,
                      "arguments": [
                        {
                          "argumentTypes": null,
                          "arguments": [
                            {
                              "argumentTypes": null,
                              "id": 1035,
                              "name": "token",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 1014,
                              "src": "820:5:8",
                              "typeDescriptions": {
                                "typeIdentifier": "t_string_memory_ptr",
                                "typeString": "string memory"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_string_memory_ptr",
                                "typeString": "string memory"
                              }
                            ],
                            "expression": {
                              "argumentTypes": null,
                              "id": 1033,
                              "name": "abi",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 1044,
                              "src": "803:3:8",
                              "typeDescriptions": {
                                "typeIdentifier": "t_magic_abi",
                                "typeString": "abi"
                              }
                            },
                            "id": 1034,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "lValueRequested": false,
                            "memberName": "encodePacked",
                            "nodeType": "MemberAccess",
                            "referencedDeclaration": null,
                            "src": "803:16:8",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_abiencodepacked_pure$__$returns$_t_bytes_memory_ptr_$",
                              "typeString": "function () pure returns (bytes memory)"
                            }
                          },
                          "id": 1036,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "803:23:8",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bytes_memory_ptr",
                            "typeString": "bytes memory"
                          }
                        }
                      ],
                      "expression": {
                        "argumentTypes": [
                          {
                            "typeIdentifier": "t_bytes_memory_ptr",
                            "typeString": "bytes memory"
                          }
                        ],
                        "id": 1032,
                        "name": "keccak256",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 1051,
                        "src": "793:9:8",
                        "typeDescriptions": {
                          "typeIdentifier": "t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$",
                          "typeString": "function (bytes memory) pure returns (bytes32)"
                        }
                      },
                      "id": 1037,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "kind": "functionCall",
                      "lValueRequested": false,
                      "names": [],
                      "nodeType": "FunctionCall",
                      "src": "793:34:8",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bytes32",
                        "typeString": "bytes32"
                      }
                    },
                    "src": "731:96:8",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "functionReturnParameters": 1018,
                  "id": 1039,
                  "nodeType": "Return",
                  "src": "711:116:8"
                }
              ]
            },
            "documentation": null,
            "id": 1041,
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "mock_testStructExists",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 1015,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 1014,
                  "name": "token",
                  "nodeType": "VariableDeclaration",
                  "scope": 1041,
                  "src": "544:19:8",
                  "stateVariable": false,
                  "storageLocation": "memory",
                  "typeDescriptions": {
                    "typeIdentifier": "t_string_memory_ptr",
                    "typeString": "string"
                  },
                  "typeName": {
                    "id": 1013,
                    "name": "string",
                    "nodeType": "ElementaryTypeName",
                    "src": "544:6:8",
                    "typeDescriptions": {
                      "typeIdentifier": "t_string_storage_ptr",
                      "typeString": "string"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "543:21:8"
            },
            "returnParameters": {
              "id": 1018,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 1017,
                  "name": "",
                  "nodeType": "VariableDeclaration",
                  "scope": 1041,
                  "src": "613:4:8",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bool",
                    "typeString": "bool"
                  },
                  "typeName": {
                    "id": 1016,
                    "name": "bool",
                    "nodeType": "ElementaryTypeName",
                    "src": "613:4:8",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "612:6:8"
            },
            "scope": 1042,
            "src": "513:322:8",
            "stateMutability": "view",
            "superFunction": null,
            "visibility": "public"
          }
        ],
        "scope": 1043,
        "src": "129:709:8"
      }
    ],
    "src": "33:807:8"
  },
  "compiler": {
    "name": "solc",
    "version": "0.5.0+commit.1d4f565a.Emscripten.clang"
  },
  "networks": {},
  "schemaVersion": "3.0.1",
  "updatedAt": "2022-03-21T18:50:35.297Z",
  "devdoc": {
    "methods": {}
  },
  "userdoc": {
    "methods": {}
  }
}